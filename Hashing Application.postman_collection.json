{
	"info": {
		"_postman_id": "98e34d50-9b00-47a7-83b4-c2f245c82e56",
		"name": "Hashing Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Hash Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6d0a1d9b-68ce-4dd3-8fbd-b0dce9e33b52",
						"exec": [
							"var value = parseInt(pm.environment.get(\"request_count\")) + 1;",
							"pm.environment.set(\"request_count\", value);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "162dadeb-9818-443c-83b5-714a2782740e",
						"exec": [
							"var requests = pm.variables.get(\"request_count\");",
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;",
							"tests[\"Response is json\"] = pm.response.to.be.json;",
							"tests[\"Body contains current request count\"] = pm.expect(pm.response.text()).to.include(requests);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{url}}:{{port}}/hash",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get hash of most recent password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f113d045-b312-4b94-813e-2d6390f16ca2",
						"exec": [
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}:{{port}}/hash/{{request_count}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash",
						"{{request_count}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get hash of nonexisting job id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f113d045-b312-4b94-813e-2d6390f16ca2",
						"exec": [
							"tests[\"Status is 400\"] = pm.response.to.have.status(400);",
							"tests[\"Body returns \\\"Hash not found\\\"\"] = pm.response.to.have.body(\"Hash not found\\n\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}:{{port}}/hash/0",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compare Hash",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c80386b-a5ea-4b89-99a2-365e33f431ff",
						"exec": [
							"/*\r",
							" * Found at http://approsto.com/shq-generator/\r",
							" * A JavaScript implementation of the Secure Hash Algorithm, SHA-512, as defined\r",
							" * in FIPS 180-2\r",
							" * Version 2.2 Copyright Anonymous Contributor, Paul Johnston 2000 - 2009.\r",
							" * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r",
							" * Distributed under the BSD License\r",
							" * See http://pajhome.org.uk/crypt/md5 for details.\r",
							" */\r",
							"\r",
							"/*\r",
							" * Configurable variables. You may need to tweak these to be compatible with\r",
							" * the server-side, but the defaults work in most cases.\r",
							" */\r",
							"var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r",
							"var b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r",
							"\r",
							"/*\r",
							" * These are the functions you'll usually want to call\r",
							" * They take string arguments and return either hex or base-64 encoded strings\r",
							" */\r",
							"function hex_sha512(s)    { return rstr2hex(rstr_sha512(str2rstr_utf8(s))); }\r",
							"function b64_sha512(s)    { return rstr2b64(rstr_sha512(str2rstr_utf8(s))); }\r",
							"function any_sha512(s, e) { return rstr2any(rstr_sha512(str2rstr_utf8(s)), e);}\r",
							"function hex_hmac_sha512(k, d)\r",
							"  { return rstr2hex(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d))); }\r",
							"function b64_hmac_sha512(k, d)\r",
							"  { return rstr2b64(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d))); }\r",
							"function any_hmac_sha512(k, d, e)\r",
							"  { return rstr2any(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d)), e);}\r",
							"\r",
							"/*\r",
							" * Perform a simple self-test to see if the VM is working\r",
							" */\r",
							"function sha512_vm_test()\r",
							"{\r",
							"  return hex_sha512(\"abc\").toLowerCase() ==\r",
							"    \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\r",
							"    \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\";\r",
							"}\r",
							"\r",
							"/*\r",
							" * Calculate the SHA-512 of a raw string\r",
							" */\r",
							"function rstr_sha512(s)\r",
							"{\r",
							"  return binb2rstr(binb_sha512(rstr2binb(s), s.length * 8));\r",
							"}\r",
							"\r",
							"/*\r",
							" * Calculate the HMAC-SHA-512 of a key and some data (raw strings)\r",
							" */\r",
							"function rstr_hmac_sha512(key, data)\r",
							"{\r",
							"  var bkey = rstr2binb(key);\r",
							"  if(bkey.length > 32) bkey = binb_sha512(bkey, key.length * 8);\r",
							"\r",
							"  var ipad = Array(32), opad = Array(32);\r",
							"  for(var i = 0; i < 32; i++)\r",
							"  {\r",
							"    ipad[i] = bkey[i] ^ 0x36363636;\r",
							"    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r",
							"  }\r",
							"\r",
							"  var hash = binb_sha512(ipad.concat(rstr2binb(data)), 1024 + data.length * 8);\r",
							"  return binb2rstr(binb_sha512(opad.concat(hash), 1024 + 512));\r",
							"}\r",
							"\r",
							"/*\r",
							" * Convert a raw string to a hex string\r",
							" */\r",
							"function rstr2hex(input)\r",
							"{\r",
							"  try { hexcase } catch(e) { hexcase=0; }\r",
							"  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r",
							"  var output = \"\";\r",
							"  var x;\r",
							"  for(var i = 0; i < input.length; i++)\r",
							"  {\r",
							"    x = input.charCodeAt(i);\r",
							"    output += hex_tab.charAt((x >>> 4) & 0x0F)\r",
							"           +  hex_tab.charAt( x        & 0x0F);\r",
							"  }\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Convert a raw string to a base-64 string\r",
							" */\r",
							"function rstr2b64(input)\r",
							"{\r",
							"  try { b64pad } catch(e) { b64pad=''; }\r",
							"  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r",
							"  var output = \"\";\r",
							"  var len = input.length;\r",
							"  for(var i = 0; i < len; i += 3)\r",
							"  {\r",
							"    var triplet = (input.charCodeAt(i) << 16)\r",
							"                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r",
							"                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r",
							"    for(var j = 0; j < 4; j++)\r",
							"    {\r",
							"      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r",
							"      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r",
							"    }\r",
							"  }\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Convert a raw string to an arbitrary string encoding\r",
							" */\r",
							"function rstr2any(input, encoding)\r",
							"{\r",
							"  var divisor = encoding.length;\r",
							"  var i, j, q, x, quotient;\r",
							"\r",
							"  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r",
							"  var dividend = Array(Math.ceil(input.length / 2));\r",
							"  for(i = 0; i < dividend.length; i++)\r",
							"  {\r",
							"    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r",
							"  }\r",
							"\r",
							"  /*\r",
							"   * Repeatedly perform a long division. The binary array forms the dividend,\r",
							"   * the length of the encoding is the divisor. Once computed, the quotient\r",
							"   * forms the dividend for the next step. All remainders are stored for later\r",
							"   * use.\r",
							"   */\r",
							"  var full_length = Math.ceil(input.length * 8 /\r",
							"                                    (Math.log(encoding.length) / Math.log(2)));\r",
							"  var remainders = Array(full_length);\r",
							"  for(j = 0; j < full_length; j++)\r",
							"  {\r",
							"    quotient = Array();\r",
							"    x = 0;\r",
							"    for(i = 0; i < dividend.length; i++)\r",
							"    {\r",
							"      x = (x << 16) + dividend[i];\r",
							"      q = Math.floor(x / divisor);\r",
							"      x -= q * divisor;\r",
							"      if(quotient.length > 0 || q > 0)\r",
							"        quotient[quotient.length] = q;\r",
							"    }\r",
							"    remainders[j] = x;\r",
							"    dividend = quotient;\r",
							"  }\r",
							"\r",
							"  /* Convert the remainders to the output string */\r",
							"  var output = \"\";\r",
							"  for(i = remainders.length - 1; i >= 0; i--)\r",
							"    output += encoding.charAt(remainders[i]);\r",
							"\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Encode a string as utf-8.\r",
							" * For efficiency, this assumes the input is valid utf-16.\r",
							" */\r",
							"function str2rstr_utf8(input)\r",
							"{\r",
							"  var output = \"\";\r",
							"  var i = -1;\r",
							"  var x, y;\r",
							"\r",
							"  while(++i < input.length)\r",
							"  {\r",
							"    /* Decode utf-16 surrogate pairs */\r",
							"    x = input.charCodeAt(i);\r",
							"    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r",
							"    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r",
							"    {\r",
							"      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r",
							"      i++;\r",
							"    }\r",
							"\r",
							"    /* Encode output as utf-8 */\r",
							"    if(x <= 0x7F)\r",
							"      output += String.fromCharCode(x);\r",
							"    else if(x <= 0x7FF)\r",
							"      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r",
							"                                    0x80 | ( x         & 0x3F));\r",
							"    else if(x <= 0xFFFF)\r",
							"      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r",
							"                                    0x80 | ((x >>> 6 ) & 0x3F),\r",
							"                                    0x80 | ( x         & 0x3F));\r",
							"    else if(x <= 0x1FFFFF)\r",
							"      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r",
							"                                    0x80 | ((x >>> 12) & 0x3F),\r",
							"                                    0x80 | ((x >>> 6 ) & 0x3F),\r",
							"                                    0x80 | ( x         & 0x3F));\r",
							"  }\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Encode a string as utf-16\r",
							" */\r",
							"function str2rstr_utf16le(input)\r",
							"{\r",
							"  var output = \"\";\r",
							"  for(var i = 0; i < input.length; i++)\r",
							"    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r",
							"                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r",
							"  return output;\r",
							"}\r",
							"\r",
							"function str2rstr_utf16be(input)\r",
							"{\r",
							"  var output = \"\";\r",
							"  for(var i = 0; i < input.length; i++)\r",
							"    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r",
							"                                   input.charCodeAt(i)        & 0xFF);\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Convert a raw string to an array of big-endian words\r",
							" * Characters >255 have their high-byte silently ignored.\r",
							" */\r",
							"function rstr2binb(input)\r",
							"{\r",
							"  var output = Array(input.length >> 2);\r",
							"  for(var i = 0; i < output.length; i++)\r",
							"    output[i] = 0;\r",
							"  for(var i = 0; i < input.length * 8; i += 8)\r",
							"    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Convert an array of big-endian words to a string\r",
							" */\r",
							"function binb2rstr(input)\r",
							"{\r",
							"  var output = \"\";\r",
							"  for(var i = 0; i < input.length * 32; i += 8)\r",
							"    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r",
							"  return output;\r",
							"}\r",
							"\r",
							"/*\r",
							" * Calculate the SHA-512 of an array of big-endian dwords, and a bit length\r",
							" */\r",
							"var sha512_k;\r",
							"function binb_sha512(x, len)\r",
							"{\r",
							"  if(sha512_k == undefined)\r",
							"  {\r",
							"    //SHA512 constants\r",
							"    sha512_k = new Array(\r",
							"new int64(0x428a2f98, -685199838), new int64(0x71374491, 0x23ef65cd),\r",
							"new int64(-1245643825, -330482897), new int64(-373957723, -2121671748),\r",
							"new int64(0x3956c25b, -213338824), new int64(0x59f111f1, -1241133031),\r",
							"new int64(-1841331548, -1357295717), new int64(-1424204075, -630357736),\r",
							"new int64(-670586216, -1560083902), new int64(0x12835b01, 0x45706fbe),\r",
							"new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, -704662302),\r",
							"new int64(0x72be5d74, -226784913), new int64(-2132889090, 0x3b1696b1),\r",
							"new int64(-1680079193, 0x25c71235), new int64(-1046744716, -815192428),\r",
							"new int64(-459576895, -1628353838), new int64(-272742522, 0x384f25e3),\r",
							"new int64(0xfc19dc6, -1953704523), new int64(0x240ca1cc, 0x77ac9c65),\r",
							"new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
							"new int64(0x5cb0a9dc, -1119749164), new int64(0x76f988da, -2096016459),\r",
							"new int64(-1740746414, -295247957), new int64(-1473132947, 0x2db43210),\r",
							"new int64(-1341970488, -1728372417), new int64(-1084653625, -1091629340),\r",
							"new int64(-958395405, 0x3da88fc2), new int64(-710438585, -1828018395),\r",
							"new int64(0x6ca6351, -536640913), new int64(0x14292967, 0xa0e6e70),\r",
							"new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
							"new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, -1651133473),\r",
							"new int64(0x650a7354, -1951439906), new int64(0x766a0abb, 0x3c77b2a8),\r",
							"new int64(-2117940946, 0x47edaee6), new int64(-1838011259, 0x1482353b),\r",
							"new int64(-1564481375, 0x4cf10364), new int64(-1474664885, -1136513023),\r",
							"new int64(-1035236496, -789014639), new int64(-949202525, 0x654be30),\r",
							"new int64(-778901479, -688958952), new int64(-694614492, 0x5565a910),\r",
							"new int64(-200395387, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
							"new int64(0x19a4c116, -1194143544), new int64(0x1e376c08, 0x5141ab53),\r",
							"new int64(0x2748774c, -544281703), new int64(0x34b0bcb5, -509917016),\r",
							"new int64(0x391c0cb3, -976659869), new int64(0x4ed8aa4a, -482243893),\r",
							"new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, -692930397),\r",
							"new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
							"new int64(-2067236844, -1578062990), new int64(-1933114872, 0x1a6439ec),\r",
							"new int64(-1866530822, 0x23631e28), new int64(-1538233109, -561857047),\r",
							"new int64(-1090935817, -1295615723), new int64(-965641998, -479046869),\r",
							"new int64(-903397682, -366583396), new int64(-779700025, 0x21c0c207),\r",
							"new int64(-354779690, -840897762), new int64(-176337025, -294727304),\r",
							"new int64(0x6f067aa, 0x72176fba), new int64(0xa637dc5, -1563912026),\r",
							"new int64(0x113f9804, -1090974290), new int64(0x1b710b35, 0x131c471b),\r",
							"new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
							"new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, -1676669620),\r",
							"new int64(0x4cc5d4be, -885112138), new int64(0x597f299c, -60457430),\r",
							"new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817));\r",
							"  }\r",
							"\r",
							"  //Initial hash values\r",
							"  var H = new Array(\r",
							"new int64(0x6a09e667, -205731576),\r",
							"new int64(-1150833019, -2067093701),\r",
							"new int64(0x3c6ef372, -23791573),\r",
							"new int64(-1521486534, 0x5f1d36f1),\r",
							"new int64(0x510e527f, -1377402159),\r",
							"new int64(-1694144372, 0x2b3e6c1f),\r",
							"new int64(0x1f83d9ab, -79577749),\r",
							"new int64(0x5be0cd19, 0x137e2179));\r",
							"\r",
							"  var T1 = new int64(0, 0),\r",
							"    T2 = new int64(0, 0),\r",
							"    a = new int64(0,0),\r",
							"    b = new int64(0,0),\r",
							"    c = new int64(0,0),\r",
							"    d = new int64(0,0),\r",
							"    e = new int64(0,0),\r",
							"    f = new int64(0,0),\r",
							"    g = new int64(0,0),\r",
							"    h = new int64(0,0),\r",
							"    //Temporary variables not specified by the document\r",
							"    s0 = new int64(0, 0),\r",
							"    s1 = new int64(0, 0),\r",
							"    Ch = new int64(0, 0),\r",
							"    Maj = new int64(0, 0),\r",
							"    r1 = new int64(0, 0),\r",
							"    r2 = new int64(0, 0),\r",
							"    r3 = new int64(0, 0);\r",
							"  var j, i;\r",
							"  var W = new Array(80);\r",
							"  for(i=0; i<80; i++)\r",
							"    W[i] = new int64(0, 0);\r",
							"\r",
							"  // append padding to the source string. The format is described in the FIPS.\r",
							"  x[len >> 5] |= 0x80 << (24 - (len & 0x1f));\r",
							"  x[((len + 128 >> 10)<< 5) + 31] = len;\r",
							"\r",
							"  for(i = 0; i<x.length; i+=32) //32 dwords is the block size\r",
							"  {\r",
							"    int64copy(a, H[0]);\r",
							"    int64copy(b, H[1]);\r",
							"    int64copy(c, H[2]);\r",
							"    int64copy(d, H[3]);\r",
							"    int64copy(e, H[4]);\r",
							"    int64copy(f, H[5]);\r",
							"    int64copy(g, H[6]);\r",
							"    int64copy(h, H[7]);\r",
							"\r",
							"    for(j=0; j<16; j++)\r",
							"    {\r",
							"        W[j].h = x[i + 2*j];\r",
							"        W[j].l = x[i + 2*j + 1];\r",
							"    }\r",
							"\r",
							"    for(j=16; j<80; j++)\r",
							"    {\r",
							"      //sigma1\r",
							"      int64rrot(r1, W[j-2], 19);\r",
							"      int64revrrot(r2, W[j-2], 29);\r",
							"      int64shr(r3, W[j-2], 6);\r",
							"      s1.l = r1.l ^ r2.l ^ r3.l;\r",
							"      s1.h = r1.h ^ r2.h ^ r3.h;\r",
							"      //sigma0\r",
							"      int64rrot(r1, W[j-15], 1);\r",
							"      int64rrot(r2, W[j-15], 8);\r",
							"      int64shr(r3, W[j-15], 7);\r",
							"      s0.l = r1.l ^ r2.l ^ r3.l;\r",
							"      s0.h = r1.h ^ r2.h ^ r3.h;\r",
							"\r",
							"      int64add4(W[j], s1, W[j-7], s0, W[j-16]);\r",
							"    }\r",
							"\r",
							"    for(j = 0; j < 80; j++)\r",
							"    {\r",
							"      //Ch\r",
							"      Ch.l = (e.l & f.l) ^ (~e.l & g.l);\r",
							"      Ch.h = (e.h & f.h) ^ (~e.h & g.h);\r",
							"\r",
							"      //Sigma1\r",
							"      int64rrot(r1, e, 14);\r",
							"      int64rrot(r2, e, 18);\r",
							"      int64revrrot(r3, e, 9);\r",
							"      s1.l = r1.l ^ r2.l ^ r3.l;\r",
							"      s1.h = r1.h ^ r2.h ^ r3.h;\r",
							"\r",
							"      //Sigma0\r",
							"      int64rrot(r1, a, 28);\r",
							"      int64revrrot(r2, a, 2);\r",
							"      int64revrrot(r3, a, 7);\r",
							"      s0.l = r1.l ^ r2.l ^ r3.l;\r",
							"      s0.h = r1.h ^ r2.h ^ r3.h;\r",
							"\r",
							"      //Maj\r",
							"      Maj.l = (a.l & b.l) ^ (a.l & c.l) ^ (b.l & c.l);\r",
							"      Maj.h = (a.h & b.h) ^ (a.h & c.h) ^ (b.h & c.h);\r",
							"\r",
							"      int64add5(T1, h, s1, Ch, sha512_k[j], W[j]);\r",
							"      int64add(T2, s0, Maj);\r",
							"\r",
							"      int64copy(h, g);\r",
							"      int64copy(g, f);\r",
							"      int64copy(f, e);\r",
							"      int64add(e, d, T1);\r",
							"      int64copy(d, c);\r",
							"      int64copy(c, b);\r",
							"      int64copy(b, a);\r",
							"      int64add(a, T1, T2);\r",
							"    }\r",
							"    int64add(H[0], H[0], a);\r",
							"    int64add(H[1], H[1], b);\r",
							"    int64add(H[2], H[2], c);\r",
							"    int64add(H[3], H[3], d);\r",
							"    int64add(H[4], H[4], e);\r",
							"    int64add(H[5], H[5], f);\r",
							"    int64add(H[6], H[6], g);\r",
							"    int64add(H[7], H[7], h);\r",
							"  }\r",
							"\r",
							"  //represent the hash as an array of 32-bit dwords\r",
							"  var hash = new Array(16);\r",
							"  for(i=0; i<8; i++)\r",
							"  {\r",
							"    hash[2*i] = H[i].h;\r",
							"    hash[2*i + 1] = H[i].l;\r",
							"  }\r",
							"  return hash;\r",
							"}\r",
							"\r",
							"//A constructor for 64-bit numbers\r",
							"function int64(h, l)\r",
							"{\r",
							"  this.h = h;\r",
							"  this.l = l;\r",
							"  //this.toString = int64toString;\r",
							"}\r",
							"\r",
							"//Copies src into dst, assuming both are 64-bit numbers\r",
							"function int64copy(dst, src)\r",
							"{\r",
							"  dst.h = src.h;\r",
							"  dst.l = src.l;\r",
							"}\r",
							"\r",
							"//Right-rotates a 64-bit number by shift\r",
							"//Won't handle cases of shift>=32\r",
							"//The function revrrot() is for that\r",
							"function int64rrot(dst, x, shift)\r",
							"{\r",
							"    dst.l = (x.l >>> shift) | (x.h << (32-shift));\r",
							"    dst.h = (x.h >>> shift) | (x.l << (32-shift));\r",
							"}\r",
							"\r",
							"//Reverses the dwords of the source and then rotates right by shift.\r",
							"//This is equivalent to rotation by 32+shift\r",
							"function int64revrrot(dst, x, shift)\r",
							"{\r",
							"    dst.l = (x.h >>> shift) | (x.l << (32-shift));\r",
							"    dst.h = (x.l >>> shift) | (x.h << (32-shift));\r",
							"}\r",
							"\r",
							"//Bitwise-shifts right a 64-bit number by shift\r",
							"//Won't handle shift>=32, but it's never needed in SHA512\r",
							"function int64shr(dst, x, shift)\r",
							"{\r",
							"    dst.l = (x.l >>> shift) | (x.h << (32-shift));\r",
							"    dst.h = (x.h >>> shift);\r",
							"}\r",
							"\r",
							"//Adds two 64-bit numbers\r",
							"//Like the original implementation, does not rely on 32-bit operations\r",
							"function int64add(dst, x, y)\r",
							"{\r",
							"   var w0 = (x.l & 0xffff) + (y.l & 0xffff);\r",
							"   var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);\r",
							"   var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);\r",
							"   var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);\r",
							"   dst.l = (w0 & 0xffff) | (w1 << 16);\r",
							"   dst.h = (w2 & 0xffff) | (w3 << 16);\r",
							"}\r",
							"\r",
							"//Same, except with 4 addends. Works faster than adding them one by one.\r",
							"function int64add4(dst, a, b, c, d)\r",
							"{\r",
							"   var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff);\r",
							"   var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (w0 >>> 16);\r",
							"   var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (w1 >>> 16);\r",
							"   var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (w2 >>> 16);\r",
							"   dst.l = (w0 & 0xffff) | (w1 << 16);\r",
							"   dst.h = (w2 & 0xffff) | (w3 << 16);\r",
							"}\r",
							"\r",
							"//Same, except with 5 addends\r",
							"function int64add5(dst, a, b, c, d, e)\r",
							"{\r",
							"   var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff);\r",
							"   var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16);\r",
							"   var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16);\r",
							"   var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);\r",
							"   dst.l = (w0 & 0xffff) | (w1 << 16);\r",
							"   dst.h = (w2 & 0xffff) | (w3 << 16);\r",
							"}\r",
							"\r",
							"var pass = pm.environment.get(\"password\"); \r",
							"var calchash = b64_sha512(pass);\r",
							"pm.environment.set(\"hash\", calchash);\r",
							"pass = pm.environment.get(\"hash\");\r",
							"pm.test(\"Hash is correct\", function () {\r",
							"    pm.response.to.have.body(pass);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{url}}:{{port}}/hash/{{request_count}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash",
						"{{request_count}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Hash Empty Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6d0a1d9b-68ce-4dd3-8fbd-b0dce9e33b52",
						"exec": [
							"var value = parseInt(pm.environment.get(\"request_count\")) + 1;",
							"pm.environment.set(\"request_count\", value);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "162dadeb-9818-443c-83b5-714a2782740e",
						"exec": [
							"var requests = pm.variables.get(\"request_count\");",
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;",
							"tests[\"Response is json\"] = pm.response.to.be.json;",
							"tests[\"Body contains current request count\"] = pm.expect(pm.response.text()).to.include(requests);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}:{{port}}/hash",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash"
					]
				}
			},
			"response": []
		},
		{
			"name": "Stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bfb2c412-2cbe-4f15-8159-dd17e20f429e",
						"exec": [
							"var requests = pm.variables.get(\"request_count\");",
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;",
							"tests[\"Response is json\"] = pm.response.to.be.json;",
							"tests[\"Request count is correct\"] = pm.expect(pm.response.text()).to.include(\"{\\\"TotalRequests\\\":\" + requests);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/stats",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"stats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Nonsense in Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e41e78fa-6abb-4a3f-a52c-94a9b3a95a67",
						"exec": [
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;",
							"tests[\"Body is empty\"] = pm.response.to.have.body(\"\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "shutdown"
				},
				"url": {
					"raw": "{{url}}:{{port}}/hash",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash"
					]
				}
			},
			"response": []
		},
		{
			"name": "shutdown",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e41e78fa-6abb-4a3f-a52c-94a9b3a95a67",
						"exec": [
							"tests[\"Status is 200\"] = pm.response.to.have.status(200);",
							"tests[\"Response is OK\"] = pm.response.to.be.ok;",
							"tests[\"Body is empty\"] = pm.response.to.have.body(\"\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "shutdown"
				},
				"url": {
					"raw": "{{url}}:{{port}}/hash",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"hash"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}